└── index.html (File)
    Content:
        <!DOCTYPE html>
        <html>
          <head>
            <title>Spin the Wheel</title>
            <meta charset="UTF-8" />
            <link rel="stylesheet" href="style.css" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
          </head>
        
          <body>
            <div id="game-container">
              <div id="spin-the-wheel">
                <canvas id="wheel" width="580" height="580"></canvas> <!-- Slightly smaller wheel -->
                <div id="spin">SPIN</div>
              </div>
        
              <div id="betting-section">
                <div id="money-display">Money: $<span id="current-money">1000</span></div>
        
                <div id="bet-description">
                  <span id="bet-type-desc">No bet selected</span>, Bet: $<span id="bet-amount-desc">0</span>
                </div>
        
                <div id="bet-controls">
                  <div class="bet-type-selector">
                    <button id="red-bet-button" class="color-bet-button red">Red</button>
                    <button id="black-bet-button" class="color-bet-button black">Black</button>
                  </div>
        
                  <div class="bet-type-selector">
                    <div class="number-bet-selector">
                      <label for="number-bet">Bet on Number:</label>
                      <div class="number-buttons">
                        <!-- Number buttons will be generated by JavaScript -->
                      </div>
                    </div>
                  </div>
                </div>
        
                <div id="bet-amount-controls">
                  <button id="decrease-bet" class="amount-button">-</button>
                  <span id="bet-amount-display">5</span>
                  <button id="increase-bet" class="amount-button">+</button>
                </div>
                <div id="place-bet-message">Select bet type and spin to play</div>
              </div>
            </div>
            <script defer src="index.js"></script>
          </body>
        </html>
└── index.js (File)
    Content:
        // --- Utility Functions ---
        /**
         * Shuffles array in place.
         * @param {Array} a items An array containing the items.
         */
        function shuffleArray(a) {
          var j, x, i;
          for (i = a.length - 1; i > 0; i--) {
            j = Math.floor(Math.random() * (i + 1));
            x = a[i];
            a[i] = a[j];
            a[j] = x;
          }
          return a;
        }
        
        // --- Game Setup ---
        const numSectors = 36; // Number of sectors on the wheel
        let userMoney = 1000; // Initial user money
        let currentBetAmount = 5; // Initial bet amount
        let selectedColorBet = null; // Currently selected color bet (red or black)
        let selectedNumberBet = null; // Currently selected number bet
        let betPlaced = false; // Flag to check if a bet is placed before spinning
        
        // Payout ratios (Roulette style)
        const colorBetPayout = 1;   // 1:1 payout for Red/Black bets
        const numberBetPayout = 35;  // 35:1 payout for Number bets
        
        // Define sector colors in roulette style alternating pattern
        const rouletteColors = [
            "#FF4136", "#111111", "#FF4136", "#111111", "#FF4136", "#111111", "#FF4136", "#111111", "#FF4136", "#111111",
            "#111111", "#FF4136", "#111111", "#FF4136", "#111111", "#FF4136", "#111111", "#FF4136", "#111111", "#FF4136",
            "#FF4136", "#111111", "#FF4136", "#111111", "#FF4136", "#111111", "#FF4136", "#111111", "#FF4136", "#111111",
            "#111111", "#FF4136", "#111111", "#FF4136", "#111111", "#FF4136"
        ];
        
        // Function to generate sectors with randomized numbers and roulette-style alternating colors
        function generateSectors(count) {
            const sectors = [];
            const numbers = Array.from({ length: count }, (_, i) => i + 1); // Create array of numbers 1 to 36
            shuffleArray(numbers); // Shuffle the numbers array
        
            for (let i = 0; i < count; i++) {
                const number = numbers[i];
                const color = rouletteColors[i % rouletteColors.length]; // Get color from pre-defined array, ensuring alternation
                const textColor = (color === "#FF4136") ? "#000000" : "#FFFFFF"; // Black text on red, White text on black
                sectors.push({
                    color: color,
                    text: textColor,
                    label: number.toString(), // Label is the sector number as a string
                    number: number         // Store the number in the sector object
                });
            }
            return sectors;
        }
        
        
        // Generate sectors array with 36 sections and randomized numbers and alternating colors
        let sectors = generateSectors(numSectors);
        
        
        // --- Event Management (retained from original code) ---
        const events = {
          listeners: {},
          addListener: function (eventName, fn) {
            this.listeners[eventName] = this.listeners[eventName] || [];
            this.listeners[eventName].push(fn);
          },
          fire: function (eventName, ...args) {
            if (this.listeners[eventName]) {
              for (let fn of this.listeners[eventName]) {
                fn(...args);
              }
            }
          },
        };
        
        // --- Wheel Drawing and Animation ---
        const rand = (m, M) => Math.random() * (M - m) + m;
        const tot = sectors.length;
        const spinEl = document.querySelector("#spin");
        const ctx = document.querySelector("#wheel").getContext("2d");
        const dia = ctx.canvas.width;
        const rad = dia / 2;
        const PI = Math.PI;
        const TAU = 2 * PI;
        const arc = TAU / sectors.length;
        
        const friction = 0.991;
        let angVel = 0;
        let ang = 0;
        
        let spinButtonClicked = false;
        
        const getIndex = () => Math.floor(tot - (ang / TAU) * tot) % tot;
        
        function drawSector(sector, i) {
          const ang = arc * i;
          ctx.save();
        
          // Draw sector color
          ctx.beginPath();
          ctx.fillStyle = sector.color;
          ctx.moveTo(rad, rad);
          ctx.arc(rad, rad, rad, ang, ang + arc);
          ctx.lineTo(rad, rad);
          ctx.fill();
        
          // Draw sector text (number)
          ctx.translate(rad, rad);
          ctx.rotate(ang + arc / 2);
          ctx.textAlign = "right";
          ctx.fillStyle = sector.text;
          ctx.font = "bold 30px sans-serif";
          ctx.fillText(sector.label, rad - 20, 10);
        
          ctx.restore();
        }
        
        function rotate() {
          const sector = sectors[getIndex()];
          ctx.canvas.style.transform = `rotate(${ang - PI / 2}rad)`;
        
          spinEl.textContent = !angVel ? "SPIN" : sector.label;
          spinEl.style.background = sector.color;
          spinEl.style.color = sector.text;
        }
        
        function frame() {
          if (!angVel && spinButtonClicked) {
            const finalSector = sectors[getIndex()];
            events.fire("spinEnd", finalSector);
            spinButtonClicked = false;
            return;
          }
        
          angVel *= friction;
          if (angVel < 0.002) angVel = 0;
          ang += angVel;
          ang %= TAU;
          rotate();
        }
        
        function engine() {
          frame();
          requestAnimationFrame(engine);
        }
        
        // --- Betting UI Elements and Logic ---
        const moneyDisplay = document.getElementById('current-money');
        const betAmountDisplay = document.getElementById('bet-amount-display');
        const increaseBetButton = document.getElementById('increase-bet');
        const decreaseBetButton = document.getElementById('decrease-bet');
        const redBetButton = document.getElementById('red-bet-button');
        const blackBetButton = document.getElementById('black-bet-button');
        const numberButtonsContainer = document.querySelector('.number-buttons');
        const placeBetMessage = document.getElementById('place-bet-message');
        const spinButton = document.getElementById('spin');
        const betTypeDesc = document.getElementById('bet-type-desc');
        const betAmountDesc = document.getElementById('bet-amount-desc');
        
        
        // Update money display on the page
        function updateMoneyDisplay() {
          moneyDisplay.textContent = userMoney;
        }
        
        // Function to handle bet amount increment/decrement and button state updates
        function adjustBetAmount(increment) {
          let newBetAmount = currentBetAmount + increment;
          if (newBetAmount >= 5 && newBetAmount <= userMoney) { // Bet amount should be at least 5 and not more than current money
            currentBetAmount = newBetAmount;
            betAmountDisplay.textContent = currentBetAmount;
            updateBetAmountButtonsState(); // Update button states based on new amount
            updateBetDescription(); // Update bet description text
          } else {
            updateBetAmountButtonsState(); // Still update button states even if no change in amount (for disabling + button)
          }
        }
        
        // Function to update the disabled state of bet amount buttons
        function updateBetAmountButtonsState() {
          increaseBetButton.classList.toggle('disabled', currentBetAmount >= userMoney);
        }
        // Function to update the disabled state of spin button
        function updateSpinButtonState() {
            spinButton.classList.toggle('disabled', !(selectedColorBet || selectedNumberBet) || currentBetAmount > userMoney || currentBetAmount <= 0);
        }
        
        
        // Function to create number buttons for betting
        function createNumberButtons() {
          for (let i = 1; i <= 36; i++) {
            const button = document.createElement('button');
            button.classList.add('number-button');
            button.textContent = i;
            button.addEventListener('click', () => {
              selectNumberBet(i);
            });
            numberButtonsContainer.appendChild(button);
          }
        }
        
        // Function to handle color bet selection
        function selectColorBet(color) {
          selectedColorBet = color;
          selectedNumberBet = null; // Deselect number bet if color is selected
          updateButtonSelectionUI();
          updateSpinButtonState(); // Update spin button state after bet selection
          updateBetDescription(); // Update bet description text
        }
        
        // Function to handle number bet selection
        function selectNumberBet(number) {
          selectedNumberBet = number;
          selectedColorBet = null; // Deselect color bet if number is selected
          updateButtonSelectionUI();
          updateSpinButtonState(); // Update spin button state after bet selection
          updateBetDescription(); // Update bet description text
        }
        
        // Function to update the visual state of buttons to reflect selections
        function updateButtonSelectionUI() {
          // Color buttons
          redBetButton.classList.toggle('selected', selectedColorBet === 'red');
          blackBetButton.classList.toggle('selected', selectedColorBet === 'black');
        
          // Number buttons
          document.querySelectorAll('.number-button').forEach(button => {
            button.classList.toggle('selected', parseInt(button.textContent) === selectedNumberBet);
          });
        }
        
        // Reset bet selections
        function resetBetSelections() {
          selectedColorBet = null;
          selectedNumberBet = null;
          betPlaced = false;
          updateButtonSelectionUI();
          updateSpinButtonState(); // Update spin button state after reset
          updateBetDescription(); // Update bet description text to default
          placeBetMessage.textContent = "Select bet type and spin to play";
        }
        
        // Function to dynamically update the bet description text
        function updateBetDescription() {
          if (selectedColorBet) {
            betTypeDesc.textContent = `Betting on ${selectedColorBet}`;
          } else if (selectedNumberBet) {
            betTypeDesc.textContent = `Betting on number ${selectedNumberBet}`;
          } else {
            betTypeDesc.textContent = "No bet selected"; // Default text when no bet is selected
          }
          betAmountDesc.textContent = currentBetAmount.toString(); // Always update bet amount
        }
        
        
        // --- Event Listeners for Betting Controls ---
        increaseBetButton.addEventListener('click', () => adjustBetAmount(5));
        decreaseBetButton.addEventListener('click', () => adjustBetAmount(-5));
        
        redBetButton.addEventListener('click', () => selectColorBet('red'));
        blackBetButton.addEventListener('click', () => selectColorBet('black'));
        
        
        // --- Spin Button Event Listener ---
        spinEl.addEventListener("click", () => {
          if (!angVel && !betPlaced) { // Allow spin only if wheel is stopped and no bet is placed yet from previous spin
            if (selectedColorBet || selectedNumberBet) { // Check if a bet is selected
              if (currentBetAmount <= userMoney && currentBetAmount > 0) { // Check if bet amount is valid
                angVel = rand(0.25, 0.45);
                spinButtonClicked = true;
                betPlaced = true; // Mark bet as placed for current spin
                placeBetMessage.textContent = "Good luck!";
                updateSpinButtonState(); // Disable spin button immediately after click
              } else {
                placeBetMessage.textContent = "Invalid bet amount or insufficient funds!";
              }
            } else {
              placeBetMessage.textContent = "Please select a bet type (Red/Black or Number)!";
            }
          }
        });
        
        
        // --- Spin End Event Listener (modified to handle betting outcomes) ---
        events.addListener("spinEnd", (finalSector) => {
          let winnings = 0;
          let winMessage = "Sorry, you lost!";
        
          if (selectedColorBet) {
            const betColor = selectedColorBet;
            const sectorRouletteColor = finalSector.color;
            let actualWinningColor = (sectorRouletteColor === "#FF4136") ? 'red' : 'black';
        
            if (betColor === actualWinningColor) {
              winnings = currentBetAmount * colorBetPayout; // 1:1 payout for color bet
              winMessage = `Congratulations! You won $${winnings} on ${actualWinningColor}!`;
              userMoney += winnings + currentBetAmount; // Add winnings and bet back to user money
            } else {
              userMoney -= currentBetAmount; // Deduct bet amount from user money on loss
            }
          } else if (selectedNumberBet) {
            const betNumber = selectedNumberBet;
            const winningNumber = finalSector.number;
        
            if (betNumber === winningNumber) {
              winnings = currentBetAmount * numberBetPayout; // 35:1 payout for number bet
              winMessage = `JACKPOT! You won $${winnings} on number ${winningNumber}!`;
              userMoney += winnings + currentBetAmount; // Add winnings and bet back to user money
            } else {
              userMoney -= currentBetAmount; // Deduct bet amount from user money on loss
            }
          }
        
          updateMoneyDisplay(); // Update money display after spin
          placeBetMessage.textContent = winMessage; // Display win/loss message
          updateBetAmountButtonsState(); // Update bet amount buttons state after win/loss
          updateSpinButtonState(); // Update spin button state after spin end
        
          if (userMoney <= 0) {
            placeBetMessage.textContent = "Game Over! You are out of money.";
            userMoney = 0; // Ensure money doesn't go below zero
            spinEl.style.pointerEvents = 'none'; // Disable spin button interaction
            spinButton.classList.add('disabled'); // Also visually disable spin button
          }
        
          resetBetSelections(); // Reset bet selections for next spin
        });
        
        
        // --- Initialization ---
        function init() {
          sectors = generateSectors(numSectors); // Generate sectors with randomized numbers and alternating colors
          sectors.forEach(drawSector);
          rotate();
          engine();
          createNumberButtons(); // Create number buttons on initialization
          updateMoneyDisplay(); // Initial money display update
          resetBetSelections(); // Ensure no bets are selected at start
          updateBetAmountButtonsState(); // Initialize bet amount buttons state
          updateSpinButtonState(); // Initialize spin button state
          updateBetDescription(); // Initialize bet description text
        }
        
        init();
└── style.css (File)
    Content:
        /* Resetting default styles for consistent rendering */
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }
        
        body {
          height: 100vh;
          display: flex; /* Changed to flex to control overall layout */
          justify-content: center; /* Center horizontally */
          align-items: center; /* Center vertically */
          margin: 0;
          background-color: white; /* Solid white background as requested */
          font-family: sans-serif; /* Setting a default font for better readability */
          user-select: none; /* Prevent text selection for better UI */
          overflow: hidden; /* Prevent scrollbars if content overflows slightly */
        }
        
        #game-container {
          display: flex;
          flex-direction: column;
          align-items: center; /* Center items horizontally */
          width: 95vw; /* Use viewport width to fit on screen */
          max-width: 800px; /* Maximum width for larger screens */
        }
        
        #spin-the-wheel {
          display: inline-block;
          position: relative;
          overflow: hidden;
          margin-bottom: 15px; /* Reduced spacing */
        }
        
        #wheel {
          display: block;
        }
        
        #spin {
          font-size: 1.8em; /* Slightly smaller font */
          font-weight: bold;
          user-select: none;
          cursor: pointer;
          display: flex;
          justify-content: center;
          align-items: center;
          position: absolute;
          top: 50%;
          left: 50%;
          width: 30%;
          height: 30%;
          margin: -15%;
          background: rgba(255, 255, 255, 0.8);
          color: #333;
          box-shadow:
            0 0 0 6px rgba(0, 0, 0, 0.2), /* Reduced shadow size */
            0 0px 10px 3px rgba(0, 0, 0, 0.3); /* Reduced shadow intensity and size */
          border-radius: 50%;
          transition: 0.3s; /* Faster transition */
        }
        
        #spin:hover {
          background: rgba(255, 255, 255, 0.95);
          box-shadow:
            0 0 0 6px rgba(0, 0, 0, 0.3),
            0 0px 15px 6px rgba(0, 0, 0, 0.4); /* Adjusted hover shadow */
        }
        
        #spin::after {
          content: "";
          position: absolute;
          top: -20px; /* Slightly smaller arrow */
          border-left: 15px solid transparent; /* Smaller arrow base */
          border-right: 15px solid transparent; /* Smaller arrow base */
          border-bottom: 20px solid white;
          border-top: none;
        }
        
        #betting-section {
          display: flex;
          flex-direction: column;
          align-items: center;
          padding: 15px; /* Reduced padding */
          border: 1px solid #ccc;
          border-radius: 8px;
          background-color: #f9f9f9;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          width: 90%; /* Take up more width in container */
          max-width: 600px; /* Limit width of betting section */
        }
        
        #money-display, #bet-description {
          font-size: 1.1em; /* Slightly smaller font */
          margin-bottom: 10px; /* Reduced margin */
          text-align: center; /* Center align text */
        }
        
        #bet-controls {
          display: flex;
          flex-direction: column;
          align-items: center;
          margin-bottom: 10px; /* Reduced margin */
          width: 100%; /* Ensure bet controls take full width */
        }
        
        .bet-type-selector {
          display: flex;
          gap: 8px; /* Reduced gap */
          margin-bottom: 8px; /* Reduced margin */
          align-items: center;
          width: 100%; /* Full width for selectors */
          justify-content: center; /* Center buttons */
        }
        
        .color-bet-button {
          padding: 8px 16px; /* Reduced padding */
          border: none;
          border-radius: 5px;
          color: white;
          font-weight: bold;
          cursor: pointer;
          opacity: 0.7;
          transition: opacity 0.3s ease;
          flex-grow: 1; /* Distribute space evenly */
          text-align: center; /* Center text in buttons */
          max-width: 120px; /* Limit max width of color buttons */
        }
        
        .color-bet-button.red {
          background-color: #FF4136;
        }
        
        .color-bet-button.black {
          background-color: #111111;
        }
        
        .color-bet-button.selected {
          opacity: 1;
          box-shadow: 0 0 4px rgba(0, 0, 0, 0.5); /* Reduced shadow size */
        }
        
        .number-bet-selector label {
          margin-right: 8px; /* Reduced margin */
          font-size: 0.95em; /* Slightly smaller font */
        }
        
        .number-buttons {
          display: grid;
          grid-template-columns: repeat(9, 1fr); /* 9 columns for longer rows */
          grid-template-rows: repeat(4, 1fr); /* 4 rows */
          gap: 4px; /* Reduced gap */
          max-width: 100%; /* Take full width of container */
          width: 100%; /* Ensure it takes full width */
        }
        
        
        .number-button {
          padding: 6px 8px; /* Reduced padding */
          border: 1px solid #ccc;
          border-radius: 3px;
          background-color: #eee;
          cursor: pointer;
          text-align: center;
          font-size: 0.85em; /* Smaller font for number buttons */
          opacity: 0.7;
          transition: opacity 0.3s ease, background-color 0.3s ease;
        }
        
        .number-button.selected {
          opacity: 1;
          background-color: #ddd;
          box-shadow: 0 0 2px rgba(0, 0, 0, 0.5); /* Reduced shadow size */
        }
        
        #bet-amount-controls {
          display: flex;
          align-items: center;
          gap: 8px; /* Reduced gap */
          margin-bottom: 10px; /* Reduced margin */
          justify-content: center; /* Center amount controls */
        }
        
        .amount-button {
          padding: 6px 10px; /* Reduced padding */
          border: 1px solid #ccc;
          border-radius: 50%;
          background-color: #eee;
          cursor: pointer;
          font-size: 0.9em; /* Smaller font for amount buttons */
          font-weight: bold;
          transition: background-color 0.3s ease;
          width: 30px; /* Fixed width for buttons */
          height: 30px; /* Fixed height for buttons */
          display: flex;
          justify-content: center;
          align-items: center;
        }
        
        .amount-button:hover {
          background-color: #ddd;
        }
        
        .amount-button.disabled {
          background-color: #ddd; /* Darker gray for disabled button */
          color: #888;
          cursor: default; /* No cursor interaction */
          pointer-events: none; /* Make button non-interactive */
        }
        
        
        #bet-amount-display {
          font-size: 1em; /* Slightly smaller font */
          font-weight: bold;
          min-width: 25px; /* Reduced min width */
          text-align: center;
        }
        
        #place-bet-message {
          font-style: italic;
          color: #777;
          min-height: 18px; /* Reduced min height */
          font-size: 0.9em; /* Smaller font for message */
          text-align: center; /* Center the message */
        }
        
        #spin.disabled {
          background-color: #ddd; /* Darker gray for disabled button */
          color: #888;
          cursor: default; /* No cursor interaction */
          pointer-events: none; /* Make button non-interactive */
        }
